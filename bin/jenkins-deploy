#!/bin/bash

set -o errexit
set -o pipefail
shopt -s extglob  # For extended pattern matching +() in slugify

# Install virtualenv in the project directory ./.venv
export PIPENV_VENV_IN_PROJECT=${PIPENV_VENV_IN_PROJECT:-1}

# Fail if any host errors. No point in continuing on if you're just going to
# have to start from zero on the next job.
export ANSIBLE_ANY_ERRORS_FATAL=True

# TODO create a job to update host key fingerpints and remove this.
# Disable host key checking
export ANSIBLE_HOST_KEY_CHECKING=False

function usage () {
  cat <<EOF >&2
$0: <command> [arguments...]

Commands:

  init
    Initialize the datagov-deploy artifact (prepares virtualenv).

  build
    Build the datagov-deploy artifact (prepares Ansible playbooks).

  ping <environment>
    Runs ansible ping to test connectivity.

  deploy <environment> <playbook.yml> [arguments...]
    Runs ansible-playbook with the given arugments for deploy.


Required environment variables:

  ANSIBLE_VAULT_FILE
    Path to the Ansible Vault password file.

  SSH_KEY_FILE
    Path to the SSH key file for access to the environment.

EOF
}

function check_required_env_vars () {
  if [[ -z "$ANSIBLE_VAULT_FILE" ]]; then
    echo "ANSIBLE_VAULT_FILE environment variable must be set." >&2
    usage
    return 1
  fi

  if [[ -z "$SSH_KEY_FILE" ]]; then
    echo "SSH_KEY_FILE environment variable must be set." >&2
    usage
    return 1
  fi
}

function ping () {
  local environment limit
  environment="$1"
  limit="${2:-all}"
  check_required_env_vars
  cd ansible
  pipenv run ansible --key-file=$SSH_KEY_FILE --vault-password-file=$ANSIBLE_VAULT_FILE --inventory "inventories/$environment" -m ping "$limit"
}

function deploy () {
  local environment playbook
  environment="$1"
  shift
  playbook="$1"
  shift

  check_required_env_vars
  cd ansible
  pipenv run ansible-playbook --key-file=$SSH_KEY_FILE --vault-password-file=$ANSIBLE_VAULT_FILE --inventory "inventories/$environment" "$playbook" "$@"
}

function init () {
  pipenv sync
}

function build () {
  pipenv run make vendor
}


if [[ "$#" -eq 0 ]]; then
  echo "Please specify a command." >&2
  usage
  exit 1
fi

command=$1
shift
case "$command" in
  build)
    build
    ;;
  deploy)
    deploy "$@"
    ;;
  init)
    init
    ;;
  ping)
    ping "$@"
    ;;
  *)
    echo "Unknown command." >&2
    usage
    exit 1
    ;;
esac
